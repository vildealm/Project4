{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Person } from \"./entity/Person\";\nimport { Like } from \"typeorm\";\nexport var resolvers = {\n  Query: {\n    persons: function persons(_, _ref) {\n      var orderBy = _ref.orderBy,\n          pageNumber = _ref.pageNumber;\n\n      if (orderBy === 'first_name') {\n        return Person.find({\n          skip: pageNumber,\n          take: 10,\n          order: {\n            first_name: 'ASC'\n          }\n        });\n      } else {\n        return Person.find({\n          skip: pageNumber,\n          take: 10,\n          order: {\n            age: 'ASC'\n          }\n        });\n      }\n    },\n    filterSearch: function filterSearch(_, _ref2) {\n      var filter = _ref2.filter,\n          orderBy = _ref2.orderBy,\n          pageNumber = _ref2.pageNumber;\n      var age = filter == null ? void 0 : filter.age;\n      var location = filter == null ? void 0 : filter.location;\n      var persons;\n\n      if (orderBy === 'first_name') {\n        if ((filter == null ? void 0 : filter.age) && (filter == null ? void 0 : filter.location) && (filter == null ? void 0 : filter.age) !== 0 && (filter == null ? void 0 : filter.location) !== \"any\") {\n          persons = Person.find({\n            where: {\n              age: age,\n              location: location\n            },\n            skip: pageNumber,\n            take: 10,\n            order: {\n              first_name: 'ASC'\n            }\n          });\n        } else if ((!(filter == null ? void 0 : filter.location) || (filter == null ? void 0 : filter.location) === \"any\") && (filter == null ? void 0 : filter.age) !== 0) {\n          persons = Person.find({\n            where: {\n              age: age\n            },\n            skip: pageNumber,\n            take: 10,\n            order: {\n              first_name: 'ASC'\n            }\n          });\n        } else if ((filter == null ? void 0 : filter.location) !== \"any\" && (!(filter == null ? void 0 : filter.age) || (filter == null ? void 0 : filter.age) === 0)) {\n          persons = Person.find({\n            where: {\n              location: location\n            },\n            skip: pageNumber,\n            take: 10,\n            order: {\n              first_name: 'ASC'\n            }\n          });\n        } else {\n          persons = Person.find({\n            skip: pageNumber,\n            take: 10,\n            order: {\n              first_name: 'ASC'\n            }\n          });\n        }\n      } else {\n          if ((filter == null ? void 0 : filter.age) && (filter == null ? void 0 : filter.location) && (filter == null ? void 0 : filter.age) !== 0 && (filter == null ? void 0 : filter.location) !== \"any\") {\n            persons = Person.find({\n              where: {\n                age: age,\n                location: location\n              },\n              skip: pageNumber,\n              take: 10,\n              order: {\n                age: 'ASC'\n              }\n            });\n          } else if ((!(filter == null ? void 0 : filter.location) || (filter == null ? void 0 : filter.location) === \"any\") && (filter == null ? void 0 : filter.age) !== 0) {\n            persons = Person.find({\n              where: {\n                age: age\n              },\n              skip: pageNumber,\n              take: 10,\n              order: {\n                age: 'ASC'\n              }\n            });\n          } else if ((filter == null ? void 0 : filter.location) !== \"any\" && (!(filter == null ? void 0 : filter.age) || (filter == null ? void 0 : filter.age) === 0)) {\n            persons = Person.find({\n              where: {\n                location: location\n              },\n              skip: pageNumber,\n              take: 10,\n              order: {\n                age: 'ASC'\n              }\n            });\n          } else {\n            persons = Person.find({\n              skip: pageNumber,\n              take: 10,\n              order: {\n                age: 'ASC'\n              }\n            });\n          }\n        }\n\n      return persons;\n    },\n    nameSearch: function nameSearch(_, _ref3) {\n      var name, orderBy, pageNumber, names, foundNames, persons, _names, _foundNames, _persons;\n\n      return _regeneratorRuntime.async(function nameSearch$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              name = _ref3.name, orderBy = _ref3.orderBy, pageNumber = _ref3.pageNumber;\n\n              if (!(orderBy === 'first_name')) {\n                _context.next = 16;\n                break;\n              }\n\n              if (!name.includes(\" \")) {\n                _context.next = 10;\n                break;\n              }\n\n              names = name.split(\" \");\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(Person.find({\n                where: [{\n                  first_name: Like(\"%\" + names[0] + \"%\")\n                }, {\n                  last_name: Like(\"%\" + names[names.length - 1] + \"%\")\n                }],\n                skip: pageNumber,\n                take: 10,\n                order: {\n                  first_name: 'ASC'\n                }\n              }));\n\n            case 6:\n              foundNames = _context.sent;\n              return _context.abrupt(\"return\", foundNames);\n\n            case 10:\n              _context.next = 12;\n              return _regeneratorRuntime.awrap(Person.find({\n                where: [{\n                  first_name: Like(\"%\" + name + \"%\")\n                }, {\n                  last_name: Like(\"%\" + name + \"%\")\n                }],\n                skip: pageNumber,\n                take: 10,\n                order: {\n                  first_name: 'ASC'\n                }\n              }));\n\n            case 12:\n              persons = _context.sent;\n              return _context.abrupt(\"return\", persons);\n\n            case 14:\n              _context.next = 28;\n              break;\n\n            case 16:\n              if (!name.includes(\" \")) {\n                _context.next = 24;\n                break;\n              }\n\n              _names = name.split(\" \");\n              _context.next = 20;\n              return _regeneratorRuntime.awrap(Person.find({\n                where: [{\n                  first_name: Like(\"%\" + _names[0] + \"%\")\n                }, {\n                  last_name: Like(\"%\" + _names[_names.length - 1] + \"%\")\n                }],\n                skip: pageNumber,\n                take: 10,\n                order: {\n                  age: 'ASC'\n                }\n              }));\n\n            case 20:\n              _foundNames = _context.sent;\n              return _context.abrupt(\"return\", _foundNames);\n\n            case 24:\n              _context.next = 26;\n              return _regeneratorRuntime.awrap(Person.find({\n                where: [{\n                  first_name: Like(\"%\" + name + \"%\")\n                }, {\n                  last_name: Like(\"%\" + name + \"%\")\n                }],\n                skip: pageNumber,\n                take: 10,\n                order: {\n                  age: 'ASC'\n                }\n              }));\n\n            case 26:\n              _persons = _context.sent;\n              return _context.abrupt(\"return\", _persons);\n\n            case 28:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  },\n  Mutation: {\n    register: function register(_, _ref4) {\n      var last_name = _ref4.last_name,\n          first_name = _ref4.first_name,\n          age = _ref4.age,\n          location = _ref4.location,\n          description = _ref4.description;\n      var person = Person.create({\n        last_name: last_name,\n        first_name: first_name,\n        age: age,\n        location: location,\n        description: description\n      });\n      person.save();\n      return true;\n    }\n  }\n};","map":{"version":3,"sources":["/Users/bbswensson/Documents/Webdev/project4-2/backend/src/resolvers.ts"],"names":["Person","Like","resolvers","Query","persons","_","orderBy","pageNumber","find","skip","take","order","first_name","age","filterSearch","filter","location","where","nameSearch","name","includes","names","split","last_name","length","foundNames","Mutation","register","description","person","create","save"],"mappings":"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","sourcesContent":["import { Person } from \"./entity/Person\";\nimport { ResolverMap } from \"./types/graphql-utils\";\nimport { Like } from \"typeorm\";\n\nexport const resolvers: ResolverMap = {\n    Query: {\n      persons: (_, {orderBy, pageNumber}: GQL.IPersonsOnQueryArguments) => {\n        if(orderBy === 'first_name'){\n          return Person.find(\n            {\n              skip: pageNumber, \n              take: 10, \n              order:{ first_name: 'ASC'}\n            }\n          )\n        }\n        else{\n          return Person.find(\n            {\n              skip: pageNumber, \n              take: 10, \n              order:{ age: 'ASC'}\n            }\n          )\n        }\n      },\n      filterSearch: (_, { filter, orderBy, pageNumber }: GQL.IFilterSearchOnQueryArguments) => {\n        const age = filter?.age;\n        const location = filter?.location;\n        let persons;\n        //Sorter alfabetisk på navn\n        if(orderBy === 'first_name'){\n          if(filter?.age && filter?.location && filter?.age !== 0 && filter?.location !== \"any\"){\n            persons = (Person.find({where:{ age, location }, skip: pageNumber, take: 10, order:{first_name: 'ASC'} }) );\n          }\n          else if((!filter?.location || filter?.location === \"any\") && filter?.age !== 0 ){\n            persons = (Person.find({where:{ age }, skip: pageNumber, take: 10, order:{first_name: 'ASC'} }) );\n          }\n          else if(filter?.location !== \"any\" && (!filter?.age || filter?.age === 0)){\n            persons = (Person.find({where:{ location }, skip: pageNumber, take: 10, order:{first_name: 'ASC'} }) );\n          }\n          else{\n            persons = (Person.find({\n              skip: pageNumber, take: 10, order:{first_name: 'ASC'}\n            }));\n          }\n        }\n        //sorter på alder\n        else{\n          if(filter?.age && filter?.location && filter?.age !== 0 && filter?.location !== \"any\"){\n            persons = (Person.find({where:{ age, location }, skip: pageNumber, take: 10, order:{ age: 'ASC'} }) );\n          }\n          else if((!filter?.location || filter?.location === \"any\") && filter?.age !== 0 ){\n            persons = (Person.find({where:{ age }, skip: pageNumber, take: 10, order:{ age: 'ASC'} }) );\n          }\n          else if(filter?.location !== \"any\" && (!filter?.age || filter?.age === 0)){\n            persons = (Person.find({where:{ location }, skip: pageNumber, take: 10, order:{ age: 'ASC'} }) );\n          }\n          else{\n            persons = (Person.find({\n              skip: pageNumber,\n              take: 10, \n              order:{ age: 'ASC'}\n            }));\n          }\n        }\n        return persons;\n      },\n      nameSearch: async (_, { name, orderBy, pageNumber }: GQL.INameSearchOnQueryArguments) => {\n        if(orderBy === 'first_name'){\n          if(name.includes(\" \")){ //søk med mer enn et ord\n            let names = name.split(\" \");\n            const foundNames = await Person.find({where:[\n              { first_name: Like(`%${names[0]}%`) }, //antar at det første ordet er et fornavn\n              { last_name: Like(`%${names[names.length-1]}%`) } //antar at det andre ordet er et etternavn, tar ikke høyde for mer enn to ord i søket\n           ],\n           skip: pageNumber,\n           take: 10, \n           order:{first_name: 'ASC'}});\n            return foundNames;\n          }\n          else{ //søk med et ord\n            const persons = await Person.find({where:[\n              { first_name: Like(`%${name}%`) },\n              { last_name: Like(`%${name}%`) }\n            ],\n            skip: pageNumber,\n            take: 10, \n            order:{first_name: 'ASC'}});\n            return persons //returner alle resultater hvor søket er enten i fornavn eller etternavn\n          }\n        }\n        else{\n          if(name.includes(\" \")){ //søk med mer enn et ord\n            let names = name.split(\" \");\n            const foundNames = await Person.find({where:[\n              { first_name: Like(`%${names[0]}%`) }, //antar at det første ordet er et fornavn\n              { last_name: Like(`%${names[names.length-1]}%`) } //antar at det andre ordet er et etternavn, tar ikke høyde for mer enn to ord i søket\n            ],\n            skip: pageNumber,\n            take: 10,  order:{ age: 'ASC'}});\n            return foundNames;\n          }\n          else{ //søk med et ord\n            const persons = await Person.find({where:[\n              { first_name: Like(`%${name}%`) },\n              { last_name: Like(`%${name}%`) }\n            ], \n            skip: pageNumber,\n            take: 10, \n            order:{ age: 'ASC'}});\n            return persons //returner alle resultater hvor søket er enten i fornavn eller etternavn\n          }\n        }\n      }\n    },\n    Mutation: {\n      register: (_, { last_name, first_name, age, location, description }: GQL.IRegisterOnMutationArguments) => {\n        const person = Person.create({\n            last_name, first_name, age, location, description\n        });\n\n        person.save();\n        return true;\n      }\n    }\n  };"]},"metadata":{},"sourceType":"module"}